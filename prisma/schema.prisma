// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    MEMBER
    BOARD
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    role          Role       @default(MEMBER)
    accounts      Account[]
    sessions      Session[]
    purchases     Purchase[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model invitedUser {
    id        String   @id @default(cuid())
    email     String   @unique
    invitedAt DateTime @default(now())
}

// Inventory management

enum Category {
    BEER
    ALCOPOP
    CIDER
    WINE
    SPIRITS
    OTHER
    CONTAINER
}

model Good {
    id        Int        @id @default(autoincrement())
    name      String
    brand     String
    volume    Float
    category  Category
    purchases Purchase[]

    @@unique([name, brand, volume])
}

model Supplier {
    id        Int        @id @default(autoincrement())
    name      String
    orgNum    Int        @unique
    purchases Purchase[]

}

model Purchase {
    id           Int      @id @default(autoincrement())
    goodId       Int
    good         Good     @relation(fields: [goodId], references: [id])
    pricePerUnit Float
    units        Int
    dateRecieved DateTime
    receiverId   String
    receiver     User     @relation(fields: [receiverId], references: [id])
    supplierId   Int
    supplier     Supplier @relation(fields: [supplierId], references: [id])

    @@unique([goodId, dateRecieved, supplierId])
}
